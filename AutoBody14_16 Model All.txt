## Import packages
library(ggplot2)
library(repr)
library(dplyr)
library(caret)

options(repr.plot.width=4, repr.plot.height=4) # Set the initial plot area dimensions
AutoBody14_16 <- read.csv("Autobody Database Modeling ready 2014_2016.csv")
AutoBody14_16Trim <- AutoBody14_16[ , c("X2014.Total.Lbs..Calculated", "X2014.Totals.Gal..Calculated", "Number.of.Painters", "Final_Employee")]
AutoBody14_16Model <-  na.omit(AutoBody14_16Trim)
View(AutoBody14_16Model)
set.seed(1955)
## Randomly sample cases to create independent training and test data
partition = createDataPartition(AutoBody14_16Model[,"X2014.Total.Lbs..Calculated"], times = 1, p = 0.75, list = FALSE)
training = AutoBody14_16Model[partition,] # Create the training sample
dim(training)
test = AutoBody14_16Model[-partition,] # Create the test sample
dim(test)
## define and fit the linear regression model
lin_mod = lm(X2014.Total.Lbs..Calculated ~ Number.of.Painters + Final_Employee, data = training)
summary(lin_mod)$coefficients
print_metrics(lin_mod, test, score, label = 'X2014.Total.Lbs..Calculated')
print_metrics = function(lin_mod, df, score, label){
resids = df[,label] - score
resids2 = resids**2
N = length(score)
r2 = as.character(round(summary(lin_mod)$r.squared, 4))
adj_r2 = as.character(round(summary(lin_mod)$adj.r.squared, 4))
cat(paste('Mean Square Error      = ', as.character(round(sum(resids2)/N, 4)), '\n'))
cat(paste('Root Mean Square Error = ', as.character(round(sqrt(sum(resids2)/N), 4)), '\n'))
cat(paste('Mean Absolute Error    = ', as.character(round(sum(abs(resids))/N, 4)), '\n'))
cat(paste('Median Absolute Error  = ', as.character(round(median(abs(resids)), 4)), '\n'))
cat(paste('R^2                    = ', r2, '\n'))
cat(paste('Adjusted R^2           = ', adj_r2, '\n'))
}
score = predict(lin_mod, newdata = test)
print_metrics(lin_mod, test, score, label = 'X2014.Total.Lbs..Calculated')
hist_resids = function(df, score, label, bins = 10){
options(repr.plot.width=4, repr.plot.height=3) # Set the initial plot area dimensions
df$resids = df[,label] - score
bw = (max(df$resids) - min(df$resids))/(bins + 1)
ggplot(df, aes(resids)) +
geom_histogram(binwidth = bw, aes(y=..density..), alpha = 0.5) +
geom_density(aes(y=..density..), color = 'blue') +
xlab('Residual value') + ggtitle('Histogram of residuals')
}
hist_resids(test, score, label = 'X2014.Total.Lbs..Calculated')
#QQ plot of the residuals. A 1:1 line would indicate perfectly normally distributed residuals
resids_qq = function(df, score, label){
    options(repr.plot.width=4, repr.plot.height=3.5) # Set the initial plot area dimensions
    df$resids = df[,label] - score
    ggplot() + 
    geom_qq(data = df, aes(sample = resids)) + 
    ylab('Quantiles of residuals') + xlab('Quantiles of standard Normal') +
    ggtitle('QQ plot of residual values')
}

resids_qq(test, score, label = 'X2014.Total.Lbs..Calculated') 